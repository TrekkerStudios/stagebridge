name: Build Multi-Platform Binaries

on:
  push:
    branches: [main, refactor]
  pull_request:
    branches: [main, refactor]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # macOS Intel build
          - os: macos-13
            platform: macos
            arch: x64
            python-version: "3.11"
            binary-name: stagebridge
            system-deps: "brew install portaudio portmidi sdl2 sdl2_image sdl2_mixer sdl2_ttf"

          # macOS Apple Silicon build
          - os: macos-14
            platform: macos
            arch: arm64
            python-version: "3.11"
            binary-name: stagebridge
            system-deps: "brew install portaudio portmidi sdl2 sdl2_image sdl2_mixer sdl2_ttf"

          # Linux x64 build
          - os: ubuntu-latest
            platform: linux
            arch: x64
            python-version: "3.11"
            binary-name: stagebridge
            system-deps: "sudo apt-get update && sudo apt-get install -y portaudio19-dev libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libasound2-dev"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: ${{ matrix.system-deps }}

      - name: Install Python dependencies
        working-directory: ./stagebridge
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller python-rtmidi

      - name: Build with PyInstaller (macOS)
        if: matrix.platform == 'macos'
        working-directory: ./stagebridge
        run: |
          pyinstaller main.py \
            --name stagebridge \
            --onefile \
            --windowed \
            --add-data "templates:templates" \
            --hidden-import "mido.backends.rtmidi" \
            --hidden-import "rtmidi" \
            --hidden-import "flask_cors" \
            --hidden-import "pythonosc.dispatcher" \
            --hidden-import "pythonosc.osc_server" \
            --hidden-import "pythonosc.udp_client" \
            --hidden-import "zeroconf._utils.ipaddress" \
            --hidden-import "kivy.core.window.window_sdl2" \
            --distpath ../dist/${{ matrix.platform }}-${{ matrix.arch }}

      - name: Build with PyInstaller (Linux)
        if: matrix.platform == 'linux'
        working-directory: ./stagebridge
        run: |
          pyinstaller main.py \
            --name stagebridge \
            --onefile \
            --add-data "templates:templates" \
            --hidden-import "mido.backends.rtmidi" \
            --hidden-import "rtmidi" \
            --hidden-import "flask_cors" \
            --hidden-import "pythonosc.dispatcher" \
            --hidden-import "pythonosc.osc_server" \
            --hidden-import "pythonosc.udp_client" \
            --hidden-import "zeroconf._utils.ipaddress" \
            --hidden-import "kivy.core.window.window_x11" \
            --distpath ../dist/${{ matrix.platform }}-${{ matrix.arch }}

      - name: Verify build
        run: |
          BINARY_PATH="dist/${{ matrix.platform }}-${{ matrix.arch }}/stagebridge"
          if [ -f "$BINARY_PATH" ]; then
            echo "✅ ${{ matrix.platform }}-${{ matrix.arch }} binary created successfully"
            ls -la "$BINARY_PATH"
            file "$BINARY_PATH"
          else
            echo "❌ ${{ matrix.platform }}-${{ matrix.arch }} binary not found"
            exit 1
          fi

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: stagebridge-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/${{ matrix.platform }}-${{ matrix.arch }}/stagebridge
          retention-days: 30

  # Create release if this is a tag push
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create archives
        run: |
          cd artifacts
          # Create platform-specific archives
          zip -j stagebridge-macos-x64.zip stagebridge-macos-x64/stagebridge
          zip -j stagebridge-macos-arm64.zip stagebridge-macos-arm64/stagebridge
          tar -czf stagebridge-linux-x64.tar.gz -C stagebridge-linux-x64 stagebridge

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/stagebridge-macos-x64.zip
            artifacts/stagebridge-macos-arm64.zip
            artifacts/stagebridge-linux-x64.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
